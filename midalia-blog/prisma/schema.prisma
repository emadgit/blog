// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    blogIdentifer String?    @unique
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    posts         Post[]
    comments      Comment[]
    categories    Category[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id                   String   @id @default(cuid())
    firstName            String?
    lastName             String?
    company              String?
    jobTitle             String?
    bio                  String?
    contactContent       String?
    githubProfile        String?
    linkedinProfile      String?
    stackoverflowProfile String?
    mediumProfile        String?
    twitterProfile       String?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    ownerId              String   @unique
    owner                User     @relation(fields: [ownerId], references: [id])
    skills               String?
}

model Post {
    id             String         @id @default(cuid())
    title          String
    content        String @db.LongText
    published      Boolean
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    authorId       String
    author         User           @relation(fields: [authorId], references: [id])
    comments       Comment[]
    postCategories PostCategory[]

    @@index([authorId])
}

model PostCategory {
    id         String   @id @default(cuid())
    postId     String
    post       Post     @relation(fields: [postId], references: [id])
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    @@index([postId])
    @@index([categoryId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String @db.LongText
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId    String
    post      Post     @relation(fields: [postId], references: [id])
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])

    @@index([postId])
    @@index([authorId])
}

model Category {
    id             String         @id @default(cuid())
    name           String         @unique
    authorId       String
    author         User           @relation(fields: [authorId], references: [id])
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    postCategories PostCategory[]

    @@index([authorId])
}
